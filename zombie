/* Demonstrate wait() avoiding the zombie state */
#include <stdio.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

int main()
{
    int pid, dip, cpid;
    pid = fork();

    if (pid == 0)
    {
        printf("1st child's process id is %d\n", getpid());
        printf("First child terminating from memory\n");
    }
    else
    {
        dip = fork();
        if (dip == 0)
        {
            printf("2nd child's process id is %d\n", getpid());
            printf("Second child terminating\n");
        }
        else
        {
            cpid = wait(0); // Wait for one child
            printf("Child with pid %d died\n", cpid);
            cpid = wait(0); // Wait for the other child
            printf("Child with pid %d died\n", cpid);
            printf("I am parent\n");
        }
    }
}


# Save the file as zombie_wait.c
nano zombie_wait.c   # paste the code

# Compile
gcc zombie_wait.c -o zombie_wait

# Run
./zombie_wait






